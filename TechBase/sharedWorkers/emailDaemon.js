/*** @author admin*//*	Here, we add the "onconnect" function to this worker (== to this .js file)	It's in this function that we receive messages from other threads, other workers,	asking us to do something*/onconnect = function(msg) // called when a new SharedWorker is created.{	// In a SharedWorker, we get the communication port in evt.ports[0]    var thePort = msg.ports[0];       thePort.onmessage = function(messageEvt)    {    	var sessionRef = currentSession(); // Get session.		var promoteToken = sessionRef.promoteWith("Administrator"); //temporarily make this session Admin level.	    	// The message is in the "data" member of the argument		var message = messageEvt.data;       	// The caller is supposed to have set a "what" property, to tell us what		// he wants us to do. We dispatch the message and act accordingly.		// Notice that the caller could have set more properties in messageEvt.				switch(message.what) 		{			case 'send email':			try 			{								switch (message.status) 				{					case "open" :					//debugger;					/**/					var mail = require("waf-mail/SMTP"); //to load the module						//Find the techs.					var sessionRef = currentSession(); // Get session.					var promoteToken = sessionRef.promoteWith("Admin"); //temporarily make this session Admin level.					var theTechs = ds.User.query("role = :1", "tech");										var rec = new Array();					theTechs.forEach(function(tech) {						rec.push(tech.eMail);					});					sessionRef.unPromote(promoteToken); //put the session back to normal.														var messageBody = message.name + " has created a new ticket in TechBase. Number: " +message.ticketID;					messageBody += "\n";					messageBody += "Problem description: " + message.problemDescription;					var messageSubject = "New Ticket Number " + message.ticketID + "Created in TechBase.";					mail.send('smtp.gmail.com', 465, true, 'wakandatechbase', 'wakanda2012', 'wakandatechbase@gmail.com', rec, messageSubject, messageBody);						break;										case "assigned" :					//debugger;					/**/					var mail = require("waf-mail/SMTP"); //to load the module						//Find the techs.					var sessionRef = currentSession(); // Get session.					var promoteToken = sessionRef.promoteWith("Admin"); //temporarily make this session Admin level.					//var theTechs = ds.User.query("role = :1", "tech");										var rec = new Array();					rec.push(message.email);					//theTechs.forEach(function(tech) {					//	rec.push(tech.eMail);					//});					sessionRef.unPromote(promoteToken); //put the session back to normal.														var messageBody = message.name + " has been assigned to your ticket in TechBase. Number: " +message.ticketID;					messageBody += "\n";					messageBody += "Problem description: " + message.problemDescription;					var messageSubject = "Ticket Number " + message.ticketID + "Assigned in TechBase.";					mail.send('smtp.gmail.com', 465, true, 'wakandatechbase', 'wakanda2012', 'wakandatechbase@gmail.com', rec, messageSubject, messageBody);						break;										case "closed" :					var mail = require("waf-mail/SMTP"); //to load the module						var messageBody = "Ticket " + message.ticketID + " has been closed.\n";					messageBody += "Problem Description: " + message.problemDescription;					var messageSubject = "Your Techbase Ticket Number " + message.ticketID + "has been closed.";					var rec = new Array(message.email);					mail.send('smtp.gmail.com', 465, true, 'wakandatechbase', 'wakanda2012', 'wakandatechbase@gmail.com', rec, messageSubject, messageBody);					break;										default:									} //Switch End																			}						catch (err)			{				//debugger;				new ds.Log({					createDate: new Date(), 					message: err.message,					line: err.line,					name: err.name,					sourceID: err.sourceID,					sourceURL: err.sourceURL				}).save();			}			break;						case "stop":			thePort.postMessage({responseType: "close"});			close();			break;						default:			thePort.postMessage({responseType: "default"});			break;		}				sessionRef.unPromote(promoteToken); //put the session back to normal.    }} //onconnect